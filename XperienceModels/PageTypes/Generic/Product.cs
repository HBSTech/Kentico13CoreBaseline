//--------------------------------------------------------------------------------------------------
// <auto-generated>
//
//     This code was generated by code generator tool.
//
//     To customize the code use your own partial class. For more info about how to use and customize
//     the generated code see the documentation at https://docs.xperience.io/.
//
// </auto-generated>
//--------------------------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using CMS;
using CMS.Base;
using CMS.Helpers;
using CMS.DataEngine;
using CMS.DocumentEngine;
using CMS.Ecommerce;
using CMS.DocumentEngine.Types.Generic;

[assembly: RegisterDocumentType(Product.CLASS_NAME, typeof(Product))]

namespace CMS.DocumentEngine.Types.Generic
{
	/// <summary>
	/// Represents a content item of type Product.
	/// </summary>
	public partial class Product : SKUTreeNode
	{
		#region "Constants and variables"

		/// <summary>
		/// The name of the data class.
		/// </summary>
		public const string CLASS_NAME = "Generic.Product";


		/// <summary>
		/// The instance of the class that provides extended API for working with Product fields.
		/// </summary>
		private readonly ProductFields mFields;


		/// <summary>
		/// The instance of the class that provides extended API for working with SKU fields.
		/// </summary>
		private readonly SKUProductFields mSKUProduct;

		#endregion


		#region "Properties"

		/// <summary>
		/// ProductID.
		/// </summary>
		[DatabaseIDField]
		public int ProductID
		{
			get
			{
				return ValidationHelper.GetInteger(GetValue("ProductID"), 0);
			}
			set
			{
				SetValue("ProductID", value);
			}
		}


		/// <summary>
		/// Product Name.
		/// </summary>
		[DatabaseField]
		public string PageName
		{
			get
			{
				return ValidationHelper.GetString(GetValue("PageName"), @"");
			}
			set
			{
				SetValue("PageName", value);
			}
		}


		/// <summary>
		/// Required to have one field that isn't a database only field... this is it.
		/// </summary>
		[DatabaseField]
		public bool UsesBaseInheritedPage
		{
			get
			{
				return ValidationHelper.GetBoolean(GetValue("UsesBaseInheritedPage"), true);
			}
			set
			{
				SetValue("UsesBaseInheritedPage", value);
			}
		}


		/// <summary>
		/// If empty, will default to the Properties -> Metadata -> Page title, followed by the Document Name.
		/// </summary>
		public string MetaData_Title
		{
			get
			{
				return ValidationHelper.GetString(GetValue("MetaData_Title"), @"");
			}
			set
			{
				SetValue("MetaData_Title", value);
			}
		}


		/// <summary>
		/// If empty, will default to the Properties -> Metadata -> Page description.
		/// </summary>
		public string MetaData_Description
		{
			get
			{
				return ValidationHelper.GetString(GetValue("MetaData_Description"), @"");
			}
			set
			{
				SetValue("MetaData_Description", value);
			}
		}


		/// <summary>
		/// If empty, will default to the Properties -> Metadata -> Page keywords.
		/// </summary>
		public string MetaData_Keywords
		{
			get
			{
				return ValidationHelper.GetString(GetValue("MetaData_Keywords"), @"");
			}
			set
			{
				SetValue("MetaData_Keywords", value);
			}
		}


		/// <summary>
		/// Should be 1280×720, JPEG PNG or GIF.
		/// 
		/// Can be overwritten manually within MVC view if thumbnail derived from a different source.
		/// </summary>
		public string MetaData_ThumbnailSmall
		{
			get
			{
				return ValidationHelper.GetString(GetValue("MetaData_ThumbnailSmall"), @"");
			}
			set
			{
				SetValue("MetaData_ThumbnailSmall", value);
			}
		}


		/// <summary>
		/// This is not used currently for SEO meta tags, but can be useful for other things within your site.
		/// </summary>
		public string MetaData_ThumbnailLarge
		{
			get
			{
				return ValidationHelper.GetString(GetValue("MetaData_ThumbnailLarge"), @"");
			}
			set
			{
				SetValue("MetaData_ThumbnailLarge", value);
			}
		}


		/// <summary>
		/// Gets an object that provides extended API for working with Product fields.
		/// </summary>
		[RegisterProperty]
		public ProductFields Fields
		{
			get
			{
				return mFields;
			}
		}


		/// <summary>
		/// Gets an object that provides extended API for working with SKU fields.
		/// </summary>
		[RegisterProperty]
		public SKUProductFields SKUProduct
		{
			get
			{
				return mSKUProduct;
			}
		}


		/// <summary>
		/// Provides extended API for working with Product fields.
		/// </summary>
		[RegisterAllProperties]
		public partial class ProductFields : AbstractHierarchicalObject<ProductFields>
		{
			/// <summary>
			/// The content item of type Product that is a target of the extended API.
			/// </summary>
			private readonly Product mInstance;


			/// <summary>
			/// Initializes a new instance of the <see cref="ProductFields" /> class with the specified content item of type Product.
			/// </summary>
			/// <param name="instance">The content item of type Product that is a target of the extended API.</param>
			public ProductFields(Product instance)
			{
				mInstance = instance;
			}


			/// <summary>
			/// ProductID.
			/// </summary>
			public int ID
			{
				get
				{
					return mInstance.ProductID;
				}
				set
				{
					mInstance.ProductID = value;
				}
			}


			/// <summary>
			/// Product Name.
			/// </summary>
			public string PageName
			{
				get
				{
					return mInstance.PageName;
				}
				set
				{
					mInstance.PageName = value;
				}
			}


			/// <summary>
			/// Required to have one field that isn't a database only field... this is it.
			/// </summary>
			public bool UsesBaseInheritedPage
			{
				get
				{
					return mInstance.UsesBaseInheritedPage;
				}
				set
				{
					mInstance.UsesBaseInheritedPage = value;
				}
			}


			/// <summary>
			/// If empty, will default to the Properties -> Metadata -> Page title, followed by the Document Name.
			/// </summary>
			public string MetaData_Title
			{
				get
				{
					return mInstance.MetaData_Title;
				}
				set
				{
					mInstance.MetaData_Title = value;
				}
			}


			/// <summary>
			/// If empty, will default to the Properties -> Metadata -> Page description.
			/// </summary>
			public string MetaData_Description
			{
				get
				{
					return mInstance.MetaData_Description;
				}
				set
				{
					mInstance.MetaData_Description = value;
				}
			}


			/// <summary>
			/// If empty, will default to the Properties -> Metadata -> Page keywords.
			/// </summary>
			public string MetaData_Keywords
			{
				get
				{
					return mInstance.MetaData_Keywords;
				}
				set
				{
					mInstance.MetaData_Keywords = value;
				}
			}


			/// <summary>
			/// Should be 1280×720, JPEG PNG or GIF.
			/// 
			/// Can be overwritten manually within MVC view if thumbnail derived from a different source.
			/// </summary>
			public string MetaData_ThumbnailSmall
			{
				get
				{
					return mInstance.MetaData_ThumbnailSmall;
				}
				set
				{
					mInstance.MetaData_ThumbnailSmall = value;
				}
			}


			/// <summary>
			/// This is not used currently for SEO meta tags, but can be useful for other things within your site.
			/// </summary>
			public string MetaData_ThumbnailLarge
			{
				get
				{
					return mInstance.MetaData_ThumbnailLarge;
				}
				set
				{
					mInstance.MetaData_ThumbnailLarge = value;
				}
			}
		}


		/// <summary>
		/// Provides extended API for working with SKU fields.
		/// </summary>
		[RegisterAllProperties]
		public class SKUProductFields : AbstractHierarchicalObject<SKUProductFields>
		{
			/// <summary>
			/// The content item of type <see cref="Product" /> that is a target of the extended API.
			/// </summary>
			private readonly Product mInstance;


			/// <summary>
			/// The <see cref="PublicStatusInfo" /> object related to product based on value of <see cref="SKUInfo.SKUPublicStatusID" /> column. 
			/// </summary>
			private PublicStatusInfo mPublicStatus = null;


			/// <summary>
			/// The <see cref="ManufacturerInfo" /> object related to product based on value of <see cref="SKUInfo.SKUManufacturerID" /> column. 
			/// </summary>
			private ManufacturerInfo mManufacturer = null;


			/// <summary>
			/// The <see cref="DepartmentInfo" /> object related to product based on value of <see cref="SKUInfo.SKUDepartmentID" /> column. 
			/// </summary>
			private DepartmentInfo mDepartment = null;


			/// <summary>
			/// The <see cref="SupplierInfo" /> object related to product based on value of <see cref="SKUInfo.SKUSupplierID" /> column. 
			/// </summary>
			private SupplierInfo mSupplier = null;


			/// <summary>
			/// The <see cref="TaxClassInfo" /> object related to product based on value of <see cref="SKUInfo.SKUTaxClassID" /> column. 
			/// </summary>
			private TaxClassInfo mTaxClass = null;


			/// <summary>
			/// The <see cref="BrandInfo" /> object related to product based on value of <see cref="SKUInfo.SKUBrandID" /> column. 
			/// </summary>
			private BrandInfo mBrand = null;


			/// <summary>
			/// The <see cref="CollectionInfo" /> object related to product based on value of <see cref="SKUInfo.SKUCollectionID" /> column. 
			/// </summary>
			private CollectionInfo mCollection = null;


			/// <summary>
			/// The shortcut to <see cref="SKUInfo" /> object which is a target of this extended API.
			/// </summary>
			private SKUInfo SKU
			{
				get
				{
					return mInstance.SKU;
				}
			}


			/// <summary>
			/// Initializes a new instance of the <see cref="SKUProductFields" /> class with SKU related fields of type <see cref="Product" /> .
			/// </summary>
			/// <param name="instance">The content item of type Product that is a target of the extended API.</param>
			public SKUProductFields(Product instance)
			{
				mInstance = instance;
			}


			/// <summary>
			/// SKUID.
			/// </summary>
			public int ID
			{
				get
				{
					return (SKU != null) ? SKU.SKUID : 0;
				}
				set
				{
					if (SKU != null)
					{
						SKU.SKUID = value;
					}
				}
			}


			/// <summary>
			/// Allows you to specify the product identifier. You can use this number or string, for example, in your accounting records.
			/// </summary>
			public string SKUNumber
			{
				get
				{
					return (SKU != null) ? SKU.SKUNumber : @"";
				}
				set
				{
					if (SKU != null)
					{
						SKU.SKUNumber = value;
					}
				}
			}


			/// <summary>
			/// Package weight.
			/// </summary>
			public double Weight
			{
				get
				{
					return (SKU != null) ? SKU.SKUWeight : 0;
				}
				set
				{
					if (SKU != null)
					{
						SKU.SKUWeight = value;
					}
				}
			}


			/// <summary>
			/// Package height.
			/// </summary>
			public double Height
			{
				get
				{
					return (SKU != null) ? SKU.SKUHeight : 0;
				}
				set
				{
					if (SKU != null)
					{
						SKU.SKUHeight = value;
					}
				}
			}


			/// <summary>
			/// Package width.
			/// </summary>
			public double Width
			{
				get
				{
					return (SKU != null) ? SKU.SKUWidth : 0;
				}
				set
				{
					if (SKU != null)
					{
						SKU.SKUWidth = value;
					}
				}
			}


			/// <summary>
			/// Package depth.
			/// </summary>
			public double Depth
			{
				get
				{
					return (SKU != null) ? SKU.SKUDepth : 0;
				}
				set
				{
					if (SKU != null)
					{
						SKU.SKUDepth = value;
					}
				}
			}


			/// <summary>
			/// Gets <see cref="PublicStatusInfo" /> object based on value of <see cref="SKUInfo.SKUPublicStatusID" /> column. 
			/// </summary>
			public PublicStatusInfo PublicStatus
			{
				get
				{
					if (SKU == null)
					{
						return null;
					}

					var id = SKU.SKUPublicStatusID;

					if ((mPublicStatus == null) && (id > 0))
					{
						mPublicStatus = PublicStatusInfo.Provider.Get(id);
					}

					return mPublicStatus;
				}
			}


			/// <summary>
			/// Gets <see cref="ManufacturerInfo" /> object based on value of <see cref="SKUInfo.SKUManufacturerID" /> column. 
			/// </summary>
			public ManufacturerInfo Manufacturer
			{
				get
				{
					if (SKU == null)
					{
						return null;
					}

					var id = SKU.SKUManufacturerID;

					if ((mManufacturer == null) && (id > 0))
					{
						mManufacturer = ManufacturerInfo.Provider.Get(id);
					}

					return mManufacturer;
				}
			}


			/// <summary>
			/// Gets <see cref="DepartmentInfo" /> object based on value of <see cref="SKUInfo.SKUDepartmentID" /> column. 
			/// </summary>
			public DepartmentInfo Department
			{
				get
				{
					if (SKU == null)
					{
						return null;
					}

					var id = SKU.SKUDepartmentID;

					if ((mDepartment == null) && (id > 0))
					{
						mDepartment = DepartmentInfo.Provider.Get(id);
					}

					return mDepartment;
				}
			}


			/// <summary>
			/// Gets <see cref="SupplierInfo" /> object based on value of <see cref="SKUInfo.SKUSupplierID" /> column. 
			/// </summary>
			public SupplierInfo Supplier
			{
				get
				{
					if (SKU == null)
					{
						return null;
					}

					var id = SKU.SKUSupplierID;

					if ((mSupplier == null) && (id > 0))
					{
						mSupplier = SupplierInfo.Provider.Get(id);
					}

					return mSupplier;
				}
			}


			/// <summary>
			/// Gets <see cref="TaxClassInfo" /> object based on value of <see cref="SKUInfo.SKUTaxClassID" /> column. 
			/// </summary>
			public TaxClassInfo TaxClass
			{
				get
				{
					if (SKU == null)
					{
						return null;
					}

					var id = SKU.SKUTaxClassID;

					if ((mTaxClass == null) && (id > 0))
					{
						mTaxClass = TaxClassInfo.Provider.Get(id);
					}

					return mTaxClass;
				}
			}


			/// <summary>
			/// Gets <see cref="BrandInfo" /> object based on value of <see cref="SKUInfo.SKUBrandID" /> column. 
			/// </summary>
			public BrandInfo Brand
			{
				get
				{
					if (SKU == null)
					{
						return null;
					}

					var id = SKU.SKUBrandID;

					if ((mBrand == null) && (id > 0))
					{
						mBrand = BrandInfo.Provider.Get(id);
					}

					return mBrand;
				}
			}


			/// <summary>
			/// Gets <see cref="CollectionInfo" /> object based on value of <see cref="SKUInfo.SKUCollectionID" /> column. 
			/// </summary>
			public CollectionInfo Collection
			{
				get
				{
					if (SKU == null)
					{
						return null;
					}

					var id = SKU.SKUCollectionID;

					if ((mCollection == null) && (id > 0))
					{
						mCollection = CollectionInfo.Provider.Get(id);
					}

					return mCollection;
				}
			}


			/// <summary>
			/// Localized name of product.
			/// </summary>
			public string Name
			{
				get
				{
					return mInstance.DocumentSKUName;
				}
				set
				{
					mInstance.DocumentSKUName = value;
				}
			}


			/// <summary>
			/// Localized description of product.
			/// </summary>
			public string Description
			{
				get
				{
					return mInstance.DocumentSKUDescription;
				}
				set
				{
					mInstance.DocumentSKUDescription = value;
				}
			}


			/// <summary>
			/// Localized short description of product.
			/// </summary>
			public string ShortDescription
			{
				get
				{
					return mInstance.DocumentSKUShortDescription;
				}
				set
				{
					mInstance.DocumentSKUShortDescription = value;
				}
			}
		}

		#endregion


		#region "Constructors"

		/// <summary>
		/// Initializes a new instance of the <see cref="Product" /> class.
		/// </summary>
		public Product() : base(CLASS_NAME)
		{
			mFields = new ProductFields(this);
			mSKUProduct = new SKUProductFields(this);
		}

		#endregion
	}
}