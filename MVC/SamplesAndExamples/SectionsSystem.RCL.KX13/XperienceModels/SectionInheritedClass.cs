//--------------------------------------------------------------------------------------------------
// <auto-generated>
//
//     This code was generated by code generator tool.
//
//     To customize the code use your own partial class. For more info about how to use and customize
//     the generated code see the documentation at https://docs.xperience.io/.
//
// </auto-generated>
//--------------------------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using CMS;
using CMS.Base;
using CMS.Helpers;
using CMS.DataEngine;
using CMS.DocumentEngine;
using CMS.DocumentEngine.Types.SectionsSystem;

[assembly: RegisterDocumentType(SectionInheritedClass.CLASS_NAME, typeof(SectionInheritedClass))]

namespace CMS.DocumentEngine.Types.SectionsSystem
{
    /// <summary>
    /// Represents a content item of type SectionInheritedClass.
    /// </summary>
    public partial class SectionInheritedClass : TreeNode
    {
        #region "Constants and variables"

        /// <summary>
        /// The name of the data class.
        /// </summary>
        public const string CLASS_NAME = "SectionsSystem.SectionInheritedClass";


        /// <summary>
        /// The instance of the class that provides extended API for working with SectionInheritedClass fields.
        /// </summary>
        private readonly SectionInheritedClassFields mFields;

        #endregion


        #region "Properties"

        /// <summary>
        /// SectionInheritedClassID.
        /// </summary>
        [DatabaseIDField]
        public int SectionInheritedClassID
        {
            get
            {
                return ValidationHelper.GetInteger(GetValue("SectionInheritedClassID"), 0);
            }
            set
            {
                SetValue("SectionInheritedClassID", value);
            }
        }


        /// <summary>
        /// Is Section.
        /// </summary>
        [DatabaseField]
        public bool IsSection
        {
            get
            {
                return ValidationHelper.GetBoolean(GetValue("IsSection"), true);
            }
            set
            {
                SetValue("IsSection", value);
            }
        }


        /// <summary>
        /// How the section should render.
        /// 
        /// Default = No styling.
        /// 
        /// Color = Solid color (based on Theme)
        /// 
        /// Image = Image background
        /// 
        /// Parallax Image = Image background with parallax effect
        /// 
        /// Video = Video background.
        /// </summary>
        public string SectionStyleType
        {
            get
            {
                return ValidationHelper.GetString(GetValue("SectionStyleType"), @"Default");
            }
            set
            {
                SetValue("SectionStyleType", value);
            }
        }


        /// <summary>
        /// Classes to add to the section.
        /// </summary>
        [DatabaseField]
        public string SectionStyleAdditionalCSS
        {
            get
            {
                return ValidationHelper.GetString(GetValue("SectionStyleAdditionalCSS"), @"");
            }
            set
            {
                SetValue("SectionStyleAdditionalCSS", value);
            }
        }


        /// <summary>
        /// Section Theme, controls font and background coloring.
        /// 
        /// The color is usually the background, and the font color is white/black depending on the theme.
        /// </summary>
        public string SectionTheme
        {
            get
            {
                return ValidationHelper.GetString(GetValue("SectionTheme"), @"None");
            }
            set
            {
                SetValue("SectionTheme", value);
            }
        }


        /// <summary>
        /// This controls the color of the text as well as any Contrast Mode settings.  
        /// 
        /// (None) - Normal text and shading.
        /// Light - The background is light, so text should be dark and contrast light.
        /// Dark - The background is dark, so text should be light and contrast dark.
        /// </summary>
        public string SectionLightDarkMode
        {
            get
            {
                return ValidationHelper.GetString(GetValue("SectionLightDarkMode"), @"");
            }
            set
            {
                SetValue("SectionLightDarkMode", value);
            }
        }


        /// <summary>
        /// If true, will add a semi-transparent contrast box around elements such as text.  Useful if background image or video may have light and dark areas which may make text / icons hard to read.
        /// </summary>
        public string SectionThemeContrastBoxMode
        {
            get
            {
                return ValidationHelper.GetString(GetValue("SectionThemeContrastBoxMode"), "None");
            }
            set
            {
                SetValue("SectionThemeContrastBoxMode", value);
            }
        }

        /// <summary>
        /// Is Section.
        /// </summary>
        [DatabaseField]
        public bool SectionShowDivider
        {
            get
            {
                return ValidationHelper.GetBoolean(GetValue("SectionShowDivider"), true);
            }
            set
            {
                SetValue("SectionShowDivider", value);
            }
        }


        /// <summary>
        /// Image.
        /// </summary>
        public string SectionImageUrl
        {
            get
            {
                return ValidationHelper.GetString(GetValue("SectionImageUrl"), @"");
            }
            set
            {
                SetValue("SectionImageUrl", value);
            }
        }


        /// <summary>
        /// Video Source Type.
        /// </summary>
        public string SectionVideoType
        {
            get
            {
                return ValidationHelper.GetString(GetValue("SectionVideoType"), @"Html5Video");
            }
            set
            {
                SetValue("SectionVideoType", value);
            }
        }


        /// <summary>
        /// The video ID of the video to use in the background.
        /// </summary>
        public string SectionVideoYoutubeCode
        {
            get
            {
                return ValidationHelper.GetString(GetValue("SectionVideoYoutubeCode"), @"");
            }
            set
            {
                SetValue("SectionVideoYoutubeCode", value);
            }
        }


        /// <summary>
        /// Video Thumbnail Url.
        /// </summary>
        public string SectionVideoThumbnailUrl
        {
            get
            {
                return ValidationHelper.GetString(GetValue("SectionVideoThumbnailUrl"), @"");
            }
            set
            {
                SetValue("SectionVideoThumbnailUrl", value);
            }
        }


        /// <summary>
        /// MP4 Stream Url.
        /// </summary>
        public string SectionVideoUrlMp4
        {
            get
            {
                return ValidationHelper.GetString(GetValue("SectionVideoUrlMp4"), @"");
            }
            set
            {
                SetValue("SectionVideoUrlMp4", value);
            }
        }


        /// <summary>
        /// WebM Stream Url.
        /// </summary>
        public string SectionVideoUrlWebM
        {
            get
            {
                return ValidationHelper.GetString(GetValue("SectionVideoUrlWebM"), @"");
            }
            set
            {
                SetValue("SectionVideoUrlWebM", value);
            }
        }


        /// <summary>
        /// Ogg Stream Url.
        /// </summary>
        public string SectionVideoUrlOgg
        {
            get
            {
                return ValidationHelper.GetString(GetValue("SectionVideoUrlOgg"), @"");
            }
            set
            {
                SetValue("SectionVideoUrlOgg", value);
            }
        }


        /// <summary>
        /// Gets an object that provides extended API for working with SectionInheritedClass fields.
        /// </summary>
        [RegisterProperty]
        public SectionInheritedClassFields Fields
        {
            get
            {
                return mFields;
            }
        }


        /// <summary>
        /// Provides extended API for working with SectionInheritedClass fields.
        /// </summary>
        [RegisterAllProperties]
        public partial class SectionInheritedClassFields : AbstractHierarchicalObject<SectionInheritedClassFields>
        {
            /// <summary>
            /// The content item of type SectionInheritedClass that is a target of the extended API.
            /// </summary>
            private readonly SectionInheritedClass mInstance;


            /// <summary>
            /// Initializes a new instance of the <see cref="SectionInheritedClassFields" /> class with the specified content item of type SectionInheritedClass.
            /// </summary>
            /// <param name="instance">The content item of type SectionInheritedClass that is a target of the extended API.</param>
            public SectionInheritedClassFields(SectionInheritedClass instance)
            {
                mInstance = instance;
            }


            /// <summary>
            /// SectionInheritedClassID.
            /// </summary>
            public int ID
            {
                get
                {
                    return mInstance.SectionInheritedClassID;
                }
                set
                {
                    mInstance.SectionInheritedClassID = value;
                }
            }


            /// <summary>
            /// Is Section.
            /// </summary>
            public bool IsSection
            {
                get
                {
                    return mInstance.IsSection;
                }
                set
                {
                    mInstance.IsSection = value;
                }
            }


            /// <summary>
            /// How the section should render.
            /// 
            /// Default = No styling.
            /// 
            /// Color = Solid color (based on Theme)
            /// 
            /// Image = Image background
            /// 
            /// Parallax Image = Image background with parallax effect
            /// 
            /// Video = Video background.
            /// </summary>
            public string SectionStyleType
            {
                get
                {
                    return mInstance.SectionStyleType;
                }
                set
                {
                    mInstance.SectionStyleType = value;
                }
            }


            /// <summary>
            /// Classes to add to the section.
            /// </summary>
            public string SectionStyleAdditionalCSS
            {
                get
                {
                    return mInstance.SectionStyleAdditionalCSS;
                }
                set
                {
                    mInstance.SectionStyleAdditionalCSS = value;
                }
            }


            /// <summary>
            /// Section Theme, controls font and background coloring.
            /// 
            /// The color is usually the background, and the font color is white/black depending on the theme.
            /// </summary>
            public string SectionTheme
            {
                get
                {
                    return mInstance.SectionTheme;
                }
                set
                {
                    mInstance.SectionTheme = value;
                }
            }


            /// <summary>
            /// If true, will add a semi-transparent contrast box around elements such as text.  Useful if background image or video may have light and dark areas which may make text / icons hard to read.
            /// </summary>
            public string SectionThemeContrastBoxMode
            {
                get
                {
                    return mInstance.SectionThemeContrastBoxMode;
                }
                set
                {
                    mInstance.SectionThemeContrastBoxMode = value;
                }
            }

            /// <summary>
            /// If the divider should show
            /// </summary>
            public bool SectionShowDivider
            {
                get
                {
                    return mInstance.SectionShowDivider;
                }
                set
                {
                    mInstance.SectionShowDivider = value;
                }
            }


            /// <summary>
            /// Image.
            /// </summary>
            public string SectionImageUrl
            {
                get
                {
                    return mInstance.SectionImageUrl;
                }
                set
                {
                    mInstance.SectionImageUrl = value;
                }
            }


            /// <summary>
            /// Video Source Type.
            /// </summary>
            public string SectionVideoType
            {
                get
                {
                    return mInstance.SectionVideoType;
                }
                set
                {
                    mInstance.SectionVideoType = value;
                }
            }


            /// <summary>
            /// The video ID of the video to use in the background.
            /// </summary>
            public string SectionVideoYoutubeCode
            {
                get
                {
                    return mInstance.SectionVideoYoutubeCode;
                }
                set
                {
                    mInstance.SectionVideoYoutubeCode = value;
                }
            }


            /// <summary>
            /// Video Thumbnail Url.
            /// </summary>
            public string SectionVideoThumbnailUrl
            {
                get
                {
                    return mInstance.SectionVideoThumbnailUrl;
                }
                set
                {
                    mInstance.SectionVideoThumbnailUrl = value;
                }
            }


            /// <summary>
            /// MP4 Stream Url.
            /// </summary>
            public string SectionVideoUrlMp4
            {
                get
                {
                    return mInstance.SectionVideoUrlMp4;
                }
                set
                {
                    mInstance.SectionVideoUrlMp4 = value;
                }
            }


            /// <summary>
            /// WebM Stream Url.
            /// </summary>
            public string SectionVideoUrlWebM
            {
                get
                {
                    return mInstance.SectionVideoUrlWebM;
                }
                set
                {
                    mInstance.SectionVideoUrlWebM = value;
                }
            }


            /// <summary>
            /// Ogg Stream Url.
            /// </summary>
            public string SectionVideoUrlOgg
            {
                get
                {
                    return mInstance.SectionVideoUrlOgg;
                }
                set
                {
                    mInstance.SectionVideoUrlOgg = value;
                }
            }
        }

        #endregion


        #region "Constructors"

        /// <summary>
        /// Initializes a new instance of the <see cref="SectionInheritedClass" /> class.
        /// </summary>
        public SectionInheritedClass() : base(CLASS_NAME)
        {
            mFields = new SectionInheritedClassFields(this);
        }

        #endregion
    }
}