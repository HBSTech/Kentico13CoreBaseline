//--------------------------------------------------------------------------------------------------
// <auto-generated>
//
//     This code was generated by code generator tool.
//
//     To customize the code use your own partial class. For more info about how to use and customize
//     the generated code see the documentation at https://docs.xperience.io/.
//
// </auto-generated>
//--------------------------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using CMS;
using CMS.Base;
using CMS.Helpers;
using CMS.DataEngine;
using CMS.DocumentEngine;
using CMS.DocumentEngine.Types.Generic;

[assembly: RegisterDocumentType(Ecommerce.CLASS_NAME, typeof(Ecommerce))]

namespace CMS.DocumentEngine.Types.Generic
{
	/// <summary>
	/// Represents a content item of type Ecommerce.
	/// </summary>
	public partial class Ecommerce : TreeNode
	{
		#region "Constants and variables"

		/// <summary>
		/// The name of the data class.
		/// </summary>
		public const string CLASS_NAME = "Generic.Ecommerce";


		/// <summary>
		/// The instance of the class that provides extended API for working with Ecommerce fields.
		/// </summary>
		private readonly EcommerceFields mFields;

		#endregion


		#region "Properties"

		/// <summary>
		/// EcommerceID.
		/// </summary>
		[DatabaseIDField]
		public int EcommerceID
		{
			get
			{
				return ValidationHelper.GetInteger(GetValue("EcommerceID"), 0);
			}
			set
			{
				SetValue("EcommerceID", value);
			}
		}


		/// <summary>
		/// Page name.
		/// </summary>
		[DatabaseField]
		public string PageName
		{
			get
			{
				return ValidationHelper.GetString(GetValue("PageName"), @"");
			}
			set
			{
				SetValue("PageName", value);
			}
		}


		/// <summary>
		/// Required to have one field that isn't a database only field... this is it.
		/// </summary>
		[DatabaseField]
		public bool UsesBaseInheritedPage
		{
			get
			{
				return ValidationHelper.GetBoolean(GetValue("UsesBaseInheritedPage"), true);
			}
			set
			{
				SetValue("UsesBaseInheritedPage", value);
			}
		}


		/// <summary>
		/// If empty, will default to the Properties -> Metadata -> Page title, followed by the Document Name.
		/// </summary>
		public string MetaData_Title
		{
			get
			{
				return ValidationHelper.GetString(GetValue("MetaData_Title"), @"");
			}
			set
			{
				SetValue("MetaData_Title", value);
			}
		}


		/// <summary>
		/// If empty, will default to the Properties -> Metadata -> Page description.
		/// </summary>
		public string MetaData_Description
		{
			get
			{
				return ValidationHelper.GetString(GetValue("MetaData_Description"), @"");
			}
			set
			{
				SetValue("MetaData_Description", value);
			}
		}


		/// <summary>
		/// If empty, will default to the Properties -> Metadata -> Page keywords.
		/// </summary>
		public string MetaData_Keywords
		{
			get
			{
				return ValidationHelper.GetString(GetValue("MetaData_Keywords"), @"");
			}
			set
			{
				SetValue("MetaData_Keywords", value);
			}
		}


		/// <summary>
		/// Should be 1280×720, JPEG PNG or GIF.
		/// 
		/// Can be overwritten manually within MVC view if thumbnail derived from a different source.
		/// </summary>
		public string MetaData_ThumbnailSmall
		{
			get
			{
				return ValidationHelper.GetString(GetValue("MetaData_ThumbnailSmall"), @"");
			}
			set
			{
				SetValue("MetaData_ThumbnailSmall", value);
			}
		}


		/// <summary>
		/// This is not used currently for SEO meta tags, but can be useful for other things within your site.
		/// </summary>
		public string MetaData_ThumbnailLarge
		{
			get
			{
				return ValidationHelper.GetString(GetValue("MetaData_ThumbnailLarge"), @"");
			}
			set
			{
				SetValue("MetaData_ThumbnailLarge", value);
			}
		}


		/// <summary>
		/// Gets an object that provides extended API for working with Ecommerce fields.
		/// </summary>
		[RegisterProperty]
		public EcommerceFields Fields
		{
			get
			{
				return mFields;
			}
		}


		/// <summary>
		/// Provides extended API for working with Ecommerce fields.
		/// </summary>
		[RegisterAllProperties]
		public partial class EcommerceFields : AbstractHierarchicalObject<EcommerceFields>
		{
			/// <summary>
			/// The content item of type Ecommerce that is a target of the extended API.
			/// </summary>
			private readonly Ecommerce mInstance;


			/// <summary>
			/// Initializes a new instance of the <see cref="EcommerceFields" /> class with the specified content item of type Ecommerce.
			/// </summary>
			/// <param name="instance">The content item of type Ecommerce that is a target of the extended API.</param>
			public EcommerceFields(Ecommerce instance)
			{
				mInstance = instance;
			}


			/// <summary>
			/// EcommerceID.
			/// </summary>
			public int ID
			{
				get
				{
					return mInstance.EcommerceID;
				}
				set
				{
					mInstance.EcommerceID = value;
				}
			}


			/// <summary>
			/// Page name.
			/// </summary>
			public string PageName
			{
				get
				{
					return mInstance.PageName;
				}
				set
				{
					mInstance.PageName = value;
				}
			}


			/// <summary>
			/// Required to have one field that isn't a database only field... this is it.
			/// </summary>
			public bool UsesBaseInheritedPage
			{
				get
				{
					return mInstance.UsesBaseInheritedPage;
				}
				set
				{
					mInstance.UsesBaseInheritedPage = value;
				}
			}


			/// <summary>
			/// If empty, will default to the Properties -> Metadata -> Page title, followed by the Document Name.
			/// </summary>
			public string MetaData_Title
			{
				get
				{
					return mInstance.MetaData_Title;
				}
				set
				{
					mInstance.MetaData_Title = value;
				}
			}


			/// <summary>
			/// If empty, will default to the Properties -> Metadata -> Page description.
			/// </summary>
			public string MetaData_Description
			{
				get
				{
					return mInstance.MetaData_Description;
				}
				set
				{
					mInstance.MetaData_Description = value;
				}
			}


			/// <summary>
			/// If empty, will default to the Properties -> Metadata -> Page keywords.
			/// </summary>
			public string MetaData_Keywords
			{
				get
				{
					return mInstance.MetaData_Keywords;
				}
				set
				{
					mInstance.MetaData_Keywords = value;
				}
			}


			/// <summary>
			/// Should be 1280×720, JPEG PNG or GIF.
			/// 
			/// Can be overwritten manually within MVC view if thumbnail derived from a different source.
			/// </summary>
			public string MetaData_ThumbnailSmall
			{
				get
				{
					return mInstance.MetaData_ThumbnailSmall;
				}
				set
				{
					mInstance.MetaData_ThumbnailSmall = value;
				}
			}


			/// <summary>
			/// This is not used currently for SEO meta tags, but can be useful for other things within your site.
			/// </summary>
			public string MetaData_ThumbnailLarge
			{
				get
				{
					return mInstance.MetaData_ThumbnailLarge;
				}
				set
				{
					mInstance.MetaData_ThumbnailLarge = value;
				}
			}
		}

		#endregion


		#region "Constructors"

		/// <summary>
		/// Initializes a new instance of the <see cref="Ecommerce" /> class.
		/// </summary>
		public Ecommerce() : base(CLASS_NAME)
		{
			mFields = new EcommerceFields(this);
		}

		#endregion
	}
}